{"version":3,"sources":["pages/Home/index.js","pages/Nominate/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Fragment","Typography_default","component","variant","color","gutterBottom","paragraph","Nominate","sections","name","path","withStyles","theme","layout","Object","defineProperty","width","marginLeft","spacing","unit","marginRight","breakpoints","up","toolbarMain","borderBottom","concat","palette","grey","toolbarTitle","flex","toolbarSecondary","justifyContent","mainFeaturedPost","backgroundColor","common","white","marginBottom","mainContent","padding","paddingRight","props","classes","react_router_dom","CssBaseline_default","className","Toolbar_default","map","section","noWrap","key","to","Paper_default","Grid_default","container","item","md","react_router","exact","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4ac9830.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction Home() {\n  return (\n    <>\n      <Typography component=\"h3\" variant=\"h3\" color=\"inherit\" gutterBottom>\n        Welcome\n      </Typography>\n      <Typography variant=\"h5\" color=\"inherit\" paragraph>\n        What's that? Sorry I couldn't hear you over the sound of me getting my\n        life together.\n      </Typography>\n    </>\n  );\n}\nexport default Home;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction Nominate() {\n  return (\n    <>\n      <Typography component=\"h3\" variant=\"h3\" color=\"inherit\" gutterBottom>\n        Other Page\n      </Typography>\n      <Typography variant=\"h5\" color=\"inherit\" paragraph>\n        Calm down. There is nothing here yet. I said I'm getting it together,\n        not that it is actually together.\n      </Typography>\n    </>\n  );\n}\nexport default Nominate;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Nominate from \"./pages/Nominate\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport \"./App.module.css\";\n\nconst sections = [\n  { name: \"Home\", path: \"/\" },\n  { name: \"Other Page\", path: \"otherpage\" }\n];\n\nconst styles = theme => ({\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing.unit * 3,\n    marginRight: theme.spacing.unit * 3,\n    [theme.breakpoints.up(1100 + theme.spacing.unit * 3 * 2)]: {\n      width: 1100,\n      marginLeft: \"auto\",\n      marginRight: \"auto\"\n    }\n  },\n  toolbarMain: {\n    borderBottom: `1px solid ${theme.palette.grey[300]}`\n  },\n  toolbarTitle: {\n    flex: 1\n  },\n  toolbarSecondary: {\n    justifyContent: \"space-between\"\n  },\n  mainFeaturedPost: {\n    backgroundColor: theme.palette.grey[800],\n    color: theme.palette.common.white,\n    marginBottom: theme.spacing.unit * 4\n  },\n  mainContent: {\n    padding: `${theme.spacing.unit * 6}px`,\n    [theme.breakpoints.up(\"md\")]: {\n      paddingRight: 0\n    }\n  }\n});\n\nfunction AppRouter(props) {\n  const { classes } = props;\n  return (\n    <Router>\n      <CssBaseline />\n      <div className={classes.layout}>\n        <Toolbar variant=\"dense\" className={classes.toolbarSecondary}>\n          {sections.map(section => (\n            <Typography color=\"inherit\" noWrap key={section.name}>\n              <Link to={section.path}>{section.name}</Link>\n            </Typography>\n          ))}\n        </Toolbar>\n\n        <main>\n          <Paper className={classes.mainFeaturedPost}>\n            <Grid container>\n              <Grid item md={6}>\n                <div className={classes.mainContent}>\n                  <Route path=\"/\" exact component={Home} />\n                  <Route path=\"/otherpage/\" component={Nominate} />\n                </div>\n              </Grid>\n            </Grid>\n          </Paper>\n        </main>\n      </div>\n    </Router>\n  );\n}\n\nexport default withStyles(styles)(AppRouter);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}